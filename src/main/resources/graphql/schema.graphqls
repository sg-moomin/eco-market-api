schema {
    query: Query,
    mutation: Mutation,
}

scalar Date
# scalar Long

type Mutation {
    registerMember(membersn: Int!, memberid: String!, memberemail: String!, membernumber: String!): Member
    # registerMemberTest($MemberEntity: Member): Member
    deleteMember(memberid: String!): Boolean
	updateMemberEmailMask(memberid: String!): Boolean
}

type Query{
	findMembers(memberid: String!): Member!
	allFindMembers: [Member]

	# Common
	# MemberEpisode
	getMemberEpisode: MemberEpisode

}

type MemberEpisode {
	mepisNo: ID!
	title: String
	# randomUID: Long
	regDate: Date
}

# 응답 : member
type Member{
	membersn: Int
	memberid: String
	memberemail : String
	membernumber : String
	# memberEpisode: MemberEpisode
	# memberEcoType: [EcoType]
}

type Friend{
	memberid: String
}

input MemberEntity{
	membersn: Int
	memberid: String
	memberemail : String
	membernumber : String
}

enum EcoType{
	FRASH
	STAR
	FIXT
}



#######################################
# Common Part
#######################################
